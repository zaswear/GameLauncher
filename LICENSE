# üöÄ MyGameVault

A dynamic web application for discovering, curating, and managing a personal list of your favorite video games. Built with vanilla JavaScript, Vercel Serverless Functions, and the RAWG.io API.

## ‚ú® Key Features

* **Tinder-style Discovery Engine**: Swipe or click to like/dislike a random selection of highly-rated games to add them to your personal vault.
* **Personal Game Vault**: All "liked" games are saved directly in your browser's local storage, so your collection is always waiting for you.
* **Dynamic Filtering**: Instantly search your vault by title or filter by genre with a dynamically populated dropdown menu.
* **Rich Game Details**: Click any game in your vault to fetch and view a detailed modal with:
    * Full game description.
    * Metacritic score with a color-coded rating.
    * A gallery of in-game screenshots.
    * A direct link to the game's Steam store page (if available).
* **Library Management**: Easily remove games from your vault with a dedicated delete button inside the details panel.
* **Export to TXT**: Download your curated list of favorite games as a simple `.txt` file with one click.
* **GOTY Hall of Fame**: A beautifully styled timeline showcasing the "Game of the Year" winners from the last 10 years.
* **Secure Contact Form**: A backend-powered contact form that sends emails without exposing the recipient's email address on the frontend.

## üõ†Ô∏è Tech Stack

* **Frontend**: HTML5, Tailwind CSS, Vanilla JavaScript (ESM)
* **Backend**: Vercel Serverless Functions (Node.js)
* **APIs**:
    * [RAWG.io API](https://rawg.io/apidocs) for all video game data.
    * [Nodemailer](https://nodemailer.com/) for handling the contact form submissions.
* **Storage**: Browser `localStorage` for client-side persistence of the user's vault.
* **Deployment**: [Vercel](https://vercel.com/)

## ‚öôÔ∏è Setup and Configuration

To run this project, you need to set up the following environment variables.

### 1. Get API Keys
* **RAWG API Key**: Sign up for a free account at [rawg.io/apikey](https://rawg.io/apikey) to get your API key.
* **Google App Password**: To use the contact form, you need to generate a 16-character "App Password" for your Gmail account. You can do this in your Google Account's security settings (Two-Factor Authentication must be enabled).

### 2. Set Environment Variables
Deploy this project to Vercel and add the following Environment Variables in your project settings:

| Name | Value |
| :--- | :--- |
| `RAWG_API_KEY` | Your API key from RAWG.io. |
| `GMAIL_USER` | Your full Gmail address (e.g., `youremail@gmail.com`). |
| `GMAIL_APP_PASSWORD` | The 16-character Google App Password you generated. |

### 3. Deployment
Simply link your GitHub repository to Vercel. Vercel will automatically detect the `package.json` file, install the dependencies (`node-fetch` and `nodemailer`), and deploy the application.

## üìÅ API Endpoints

The backend functionality is handled by three serverless functions located in the `/api` directory:

* **/api/getDiscoverGames**: Fetches a random, paginated list of highly-rated games from RAWG to power the Tinder-style discovery engine.
* **/api/getGameDetails**: Fetches the full, rich details for a single game ID from RAWG. This is called when a user clicks on a game to view its details.
* **/api/sendEmail**: A secure endpoint that processes the contact form submission using Nodemailer and the configured Gmail credentials.

## üìÑ License

This project is licensed under the CC0 1.0 Universal License. See the `LICENSE` file for more details.